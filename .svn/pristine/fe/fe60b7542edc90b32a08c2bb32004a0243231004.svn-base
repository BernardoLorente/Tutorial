<?php
class task extends control
{
    /**
     * Construct function, load model of project and story modules.
     * 
     * @access public
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
        $this->loadModel('tree');
        $this->loadModel('user');
        $this->loadModel('workspace');
        $this->loadModel('mail');
        $this->loadModel('action');
    }

    /**
     * view all tasks.
     * 
     * @param  string    $viewtype 
     * @access public
     * @return void
     */
    public function viewTask($viewtype = 'all', $orderBy = 'id_desc', $recTotal = 0, $recPerPage = 15, $pageID = 1)
    {
        /*根据权限设置任务列表*/
        $taskList       = array();
        $taskList       = $this->task->setTaskList();

        /* Process the order by field. */
        if(!$orderBy) $orderBy = $this->cookie->TaskOrder ? $this->cookie->TaskOrder : 'createtime';
        setcookie('TaskOrder', $orderBy, $this->config->cookieLife, $this->config->webRoot);

        /* Load pager and get tasks. */
        $this->app->loadClass('pager', $static = true);
        $pager = new pager($recTotal, $recPerPage, $pageID);
       
        $tasks          = $this->task->getTasks($viewtype, 0, $pager, $orderBy);
        $userpairs      = $this->user->getPairs('noletter');

        $this->view->tasks          = $tasks;
        $this->view->pager          = $pager;
        $this->view->recTotal       = $pager->recTotal;
        $this->view->recPerPage     = $pager->recPerPage;
        $this->view->pageID         = $pager->pageID;
        $this->view->orderBy        = $orderBy;
        $this->view->userpairs      = $userpairs;
        $this->view->taskList       = $taskList;
        $this->view->viewtype       = $viewtype;
        
        $this->display();
    }

    /**
     * Create a task.
     * 
     * @param  int    $moduleID 
     * @param  int    $taskID
     * @access public
     * @return void
     */
    public function create()
    { 
        if(!empty($_POST))
        {
            if (!$this->post->assignedTo) 
            {
                echo js::alert($this->lang->task->noAssign);
                die(js::locate($this->createLink('task', 'create'), 'parent'));
            }
            $this->task->create();
            die(js::locate($this->createLink('task', 'viewTask', "viewtype=all"), 'parent'));
        }

        foreach ($this->task->getTeamMembers() as $student) 
        {
            $members[$student->account] = $student->realname;
        }
        
        $this->view->task             = $task;
        $this->view->members          = $members;
        $this->display();
    }

    /**
     * Edit a task.
     * 
     * @param  int    $taskID 
     * @access public
     * @return void
     */
    public function edit($taskID, $comment = false)
    {
        $task = $this->task->getById($taskID);

        if (!$this->task->checkPriv($task, 'edit')) die();
        /*can assess or not*/
        $can_edit = (!$task->begin_time or $task->begin_time == '0000-00-00 00:00:00');

        if(!$can_edit)
        {
            echo js::alert($this->lang->task->can_not_edit);
            die(js::locate($this->createLink('task', 'viewTask'), 'parent'));
        }

        if(!empty($_POST))
        {
            
            $changes = array();
            $files   = array();
            if($comment == false)
            {  
                $changes = $this->task->update($taskID);
                $this->action->create('task', $taskID, 'edited');
                if(dao::isError()) die(js::error(dao::getError()));
            }

            $task = $this->task->getById($taskID);
            if(!empty($changes) or !empty($files))
            {
                $action = !empty($changes) ? 'Edited' : 'Commented';
                $fileAction = '';
                if(!empty($files)) $fileAction = $this->lang->addFiles . join(',', $files) . "\n" ;
                $actionID = $this->action->create('task', $taskID, $action, $fileAction . $this->post->comment);
                if(!empty($changes)) $this->action->logHistory($actionID, $changes);
            }
            die(js::locate($this->createLink('task', 'view', "taskID=$taskID"), 'parent'));
        }
        
        foreach ($this->task->getTeamMembers() as $student) 
        {
            $members[$student->account] = $student->realname;
        }

        $this->view->task    = $this->task->getByID($taskID);
        $this->view->members          = $members;
        $this->view->actions = $this->loadModel('action')->getList('task', $taskID);    
        if(!isset($members[$this->view->task->assignedTo])) $members[$this->view->task->assignedTo] = $this->view->task->assignedTo;
        $this->display();
    }

    /**
     * Batch edit task.
     * 
     * @access public
     * @return void
     */
    public function batchedit()
    {
        if($this->post->titles)
        {
            $allChanges = array();
            $allChanges = $this->task->batchUpdate();
            if(!empty($allChanges))
            {
                foreach($allChanges as $taskID => $changes)
                {
                    if(!empty($changes))
                    {
                        $actionID = $this->loadModel('action')->create('task', $taskID, 'Edited');
                        $this->action->logHistory($actionID, $changes);
                        //$this->sendmail($taskID, $actionID);

                        $task = $this->task->getById($taskID);
                    }
                }
            }
            die(js::locate($this->createLink('task', 'viewTask'), 'parent'));
        }

        $taskIDList = $this->post->taskIDList ? $this->post->taskIDList : die(js::locate($this->createLink('task', 'viewTask'), 'parent'));

        /* Get edited tasks. */
        $tasks = $this->task->getByList($taskIDList);

        /* Judge whether the editedTasks is too large and set session. */
        $showSuhosinInfo = false;
        $showSuhosinInfo = $this->loadModel('common')->judgeSuhosinSetting(count($tasks), $this->config->task->batchEdit->columns);
        $this->app->session->set('showSuhosinInfo', $showSuhosinInfo);
        if($showSuhosinInfo) $this->view->suhosinInfo = $this->lang->suhosinInfo;

        /* Assign. */
        $this->view->position[]  = $this->lang->task->batchEdit;
        $this->view->taskIDList  = $taskIDList;
        $this->view->tasks       = $tasks;

        $this->display();
    }

    /**
     * assess a task.
     * 
     * @access public
     * @return void
     */
    public function assess($taskID = 0)
    {
        /*根据权限设置任务列表*/
        $taskList = array();
        $taskList = $this->task->setTaskList();
        $task = $this->task->getById($taskID);
        $time = date('Y-m-d H:i:s');
        /*can assess or not*/
        $can_assess = ($task->submittime != null);
        
        if (!$this->task->checkPriv($task, 'assess')) die();
        if(!$can_assess)
        {
            echo js::alert($this->lang->task->can_not_assess);
            die(js::locate($this->createLink('task', 'viewTask'), 'parent'));
        }
       
        if(!empty($_POST))
        {
            $this->task->makeComment($taskID,'AT');
            $this->dao->update(TABLE_TASK)
                ->set('assesstime')->eq($time)
                ->where('id')->eq($taskID)
                ->exec();
            $this->action->create('task', $taskID, 'assessed');
            die(js::locate($this->createLink('task', 'view', "taskID=$taskID"), 'parent'));
        }
        $assess_comments = $this->task->getComments('assessTask', $taskID);
        $comments = $this->task->getComments('task',$taskID);

        $this->view->task           = $task;
        $this->view->taskList       = $taskList;
        $this->view->comments    = $comments;
        $this->view->assess_comments  = $assess_comments;
        $this->display();
    }

    /**
     * Delete a task.
     * 
     * @param  int    $projectID 
     * @param  int    $taskID 
     * @param  string $confirm yes|no
     * @access public
     * @return void
     */
    public function delete($taskID, $confirm = 'no')
    {
        $task = $this->task->getById($taskID);
        
        if (!$this->task->checkPriv($task, 'delete')) die();
        if($confirm == 'no')
        {
            die(js::confirm($this->lang->task->confirmDelete, inlink('delete', "taskID=$taskID&confirm=yes")));
        }
        else
        {
            $this->task->delete($taskID);
            $this->action->create('task', $taskID, 'deleted');
            if($this->server->ajax)
            {
                if(dao::isError())
                {
                    $response['result']  = 'fail';
                    $response['message'] = dao::getError();
                }
                else
                {
                    $response['result']  = 'success';
                    $response['message'] = '';
                }
                $this->send($response);
            }
            
            die(js::locate($this->createLink('task', 'viewTask'), 'parent'));
        }
    }

    /**
     * Batch delete tasks.
     * 
     * @access public
     * @return void
     */
    public function batchDelete()
    {
        if($this->post->taskIDList)
        {
            $taskIDList = $this->post->taskIDList;
            unset($_POST['taskIDList']);
            //$this->loadModel('action');

            $tasks = $this->task->getByList($taskIDList);

            foreach($tasks as $taskID => $task)
            {
                if($task->start_time != '0000-00-00 00:00:00' and $task->start_time and !$task->complete_time and $task->complete_time == '0000-00-00 00:00:00')
                {
                    $skipTasks[$taskID] = $taskID;
                    continue;
                }
                $this->task->delete($taskID);
            }
            if(isset($skipTasks)) echo js::alert(sprintf($this->lang->task->error->skipClose, join(',', $skipTasks)));
        }
        die(js::reload('parent'));
    }

    /**
     * Finish a task.
     * 
     * @param  int    $projectID 
     * @param  int    $taskID 
     * @param  string $confirm yes|no
     * @access public
     * @return void
     */
    public function finish($taskID, $confirm = 'no')
    {
        $task = $this->task->getById($taskID);

        if (!$this->task->checkPriv($task, 'finish')) die();
        
        if($confirm == 'no')
        {
            die(js::confirm($this->lang->task->confirmFinish, inlink('finish', "taskID=$taskID&confirm=yes"), $this->createLink('task', 'viewTask')));
        }
        else
        {
            $this->task->finish($taskID);
            $this->action->create('task', $taskID, 'closed');
            if($this->server->ajax)
            {
                if(dao::isError())
                {
                    $response['result']  = 'fail';
                    $response['message'] = dao::getError();
                }
                else
                {
                    $response['result']  = 'success';
                    $response['message'] = '';
                }
                $this->send($response);
            }
            
            die(js::locate(inlink('viewTask', 'viewtype=done')));
        }
    }

    /**
     * view a task.
     * 
     * @access public
     * @return void
     */
    public function view($taskID = 0)
    {
        /*根据权限设置任务列表*/
        $taskList = array();
        $taskList = $this->task->setTaskList();
        $task = $this->task->getById($taskID);
        $userpairs      = $this->user->getPairs('noletter');
        
        if (!$this->task->checkPriv($task, 'view')) die();
        $this->task->saveRead($task);
        if(!empty($_POST))
        {
            $this->task->makeComment($taskID,'T');
            die(js::locate($this->createLink('task', 'view', "taskID=$taskID"), 'parent'));
        }
        $assess_comments = $this->task->getComments('assessTask', $taskID);
        $comments = $this->task->getComments('task',$taskID);
        //$this->task->setBeginning($taskID);

        $this->view->task           = $task;
        $this->view->taskList       = $taskList;
        $this->view->comments       = $comments;
        $this->view->assess_comments= $assess_comments;
        $this->view->userpairs      = $userpairs;
        $this->display();
    }

    /**
     * Submit a task.
     * 
     * @param  int    $projectID 
     * @param  int    $taskID 
     * @param  string $confirm yes|no
     * @access public
     * @return void
     */
    public function submit($taskID)
    {
        $task = $this->task->getById($taskID);
        if (!$this->task->checkPriv($task, 'submit')) die();
        $this->view->task = $task;
        $cur_time = date('Y-m-d H:i:s');
        /*can submit or not*/
        $can_submit = ($cur_time >= $task->begintime) && ($task->completetime == null || $task->completetime == '0000-00-00 00:00:00');

        if(!$can_submit)
        {
            echo js::alert($this->lang->task->can_not_submit);
            die(js::locate($this->createLink('task', 'viewTask'), 'parent'));
        }

        if(!empty($_POST))
        {
            $this->task->checkSubmit($taskID);
            $this->action->create('task', $taskID, 'submited');
            if(dao::isError()) die(js::error(dao::getError()));

            if(isonlybody()) die(js::closeModal('parent.parent', 'this'));
            die(js::locate($this->createLink('task', 'view', "taskID=$taskID"), 'parent'));
        }

        // $this->view->title      = $this->view->project->name . $this->lang->colon .$this->lang->task->finish;
        // $this->view->position[] = $this->lang->task->finish;
        $this->view->date       = strftime("%Y-%m-%d %X", strtotime('now'));
       
        $this->display();
    } 

    public function editsubmit($taskID)
    {

        if (!empty($_POST))
        {
            $this->task->editSubmit($taskID);
            if(dao::isError()) die(js::error(dao::getError()));
            $this->action->create('task', $taskID, 'changed');
            die(js::closeModal('parent.parent', 'this'));
        }

        $this->view->task = $this->task->getById($taskID);
        if (!$this->task->checkPriv($this->view->task, 'editsubmit')) die();
        if ($this->view->task->acpID != $this->session->user->account) die();

        $this->display();
    }  
}
