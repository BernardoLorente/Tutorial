<?php
/**
 * The model file of task module of ZenTaoPMS.
 *
 * @copyright   Copyright 2009-2013 青岛易软天创网络科技有限公司 (QingDao Nature Easy Soft Network Technology Co,LTD www.cnezsoft.com)
 * @license     LGPL (http://www.gnu.org/licenses/lgpl.html)
 * @author      Chunsheng Wang <chunsheng@cnezsoft.com>
 * @package     task
 * @version     $Id: model.php 5154 2013-07-16 05:51:02Z chencongzhi520@gmail.com $
 * @link        http://www.zentao.net
 */
?>
<?php
class taskModel extends model
{

	/**
	 * Create a task.
	 * 
	 * @access public
	 * @return void
	 */
	public function create()
	{
		$tasksID = array();
		$taskFile = '';
		$now = helper::now();

		$assignedToList = $this->post->assignedTo;

		foreach ($assignedToList as $assignedTo) 
		{
			$task = fixer::input('post')
				->striptags('title')
				->setForce('acpID',  $assignedTo)
				->setDefault('asgID',   $this->app->user->account)
				->remove('files,labels,assignedTo, days')
				->get();
			if($assignedTo) $task->createtime = $now;

			/*chang date to datetime*/
			if($task->deadline and $task->deadline !='0000-00-00 00:00:00')
			{
				$task->deadline .= ' 23:59:59';
				$task->begintime .= ' '. date('H:i:s');
			}

			$this->dao->insert(TABLE_TASK)->data($task)
				->autoCheck()
				->batchCheck($this->config->task->create->requiredFields, 'notempty')
				->exec();

			if(!dao::isError())
			{   
				$taskID = $this->dao->lastInsertID();
				$this->loadModel('file')->saveUpload('task', $taskID, '', $task->acl);
			}
			else
			{
				die(js::error(dao::getError()));
			}

			/*send mail to inform the receiver*/
			$subject = $this->lang->task->mail->subject;
			$body = sprintf($this->lang->task->mail->body, $this->app->user->account, 'URL');
			$this->loadModel('mail')->send($assignedTo, $subject, $body, '', true);
			$this->loadModel('action')->create('task', $taskID, 'created');
		}
	}

	/**
	 * Update a task.
	 * 
	 * @param  int    $taskID 
	 * @access public
	 * @return void
	 */
	public function update($taskID)
	{      
		$time = date('Y-m-d H:i:s');
		$task = fixer::input('post')
			->striptags('title')
			->add('updatetime', $time)
			->add('acpID', implode('|', $this->post->assignedTo))
			->remove('files,labels,assignedTo,days')
			->get();
		$this->dao->update(TABLE_TASK)->data($task)
			->autoCheck()
			->batchCheckIF($this->config->task->edit->requiredFields, 'notempty')
			->where('id')->eq((int)$taskID)->exec();
        if(!dao::isError())
		{ 
		    $this->dao->update(TABLE_FILE)->set('acl')->eq($task->ACL)->where('objectType')->eq('task')->andWhere('objectID')->eq($taskID)->andWhere('deleted')->eq(0)->exec();
			$this->loadModel('file')->saveUpload('submittask', $taskID, '', $task->ACL);
		}
		else
		{
			die(js::error(dao::getError()));
		}
	}

	/**
	 * Batch update task.
	 * 
	 * @access public
	 * @return void
	 */
	public function batchUpdate()
	{
		$tasks      = array();
		// $allChanges = array();
		$now        = helper::now();
		$today      = date(DT_DATE1);
		$taskIDList = $this->post->taskIDList;

		/* Adjust whether the post data is complete, if not, remove the last element of $taskIDList. */
		if($this->session->showSuhosinInfo) array_pop($taskIDList);

		/* Initialize tasks from the post data.*/
		foreach($taskIDList as $taskID)
		{
			$oldTask = $this->getById($taskID);

			$task = new stdclass();
			$task->title           = htmlspecialchars($this->post->titles[$taskID]);
			$task->content         = isset($this->post->contents[$taskID]) ? $this->post->contents[$taskID] : $oldTask->content;
			$task->deadline        = $this->post->deadlines[$taskID];

			/*chang date to datetime*/
			if($task->deadline and $task->deadline !='0000-00-00 00:00:00')
			{
				$time = explode(' ', $now);
				$task->deadline .= ' '.$time[1];
			}

			$this->dao->update(TABLE_TASK)->data($task)
				->autoCheck()
				->batchCheckIF($this->config->task->edit->requiredFields, 'notempty')
				->where('id')->eq((int)$taskID)
				->exec();

			if(!dao::isError()) 
			{
				$allChanges[$taskID] = common::createChanges($oldTask, $task);
			}
			else
			{
				die(js::error('task#' . $taskID . dao::getError(true)));
			}
		}

		return $allChanges;
	}

	/**
	 * Submit a task.
	 * 
	 * @param  int      $taskID 
	 * @access public
	 * @return void
	 */
	public function submit($taskID)
	{        
		/*update the task*/
		$task = fixer::input('post')
			->add('submittime', date('Y-m-d H:i:s'))
			->remove('labels, files')
			->get();

		$this->dao->update(TABLE_TASK)
			->data($task)
			->where('id')->eq($taskID)
			->exec();

		/*set the upload file*/
		if(!dao::isError())
		{
			$this->loadModel('file')->saveUpload('submittask', $taskID);
		}
		else
		{
			die(js::error(dao::getError()));
		}

		if(!dao::isError())
		{
			$old_Task = $this->getById($taskID);
			return common::createChanges($old_Task, $task);
		} 
	}

	/**
	 * delete a task.
	 * 
	 * @param  int    $taskID 
	 * @access public
	 * @return void
	 */
	public function delete($taskID)
	{
		// $oldTask = $this->getById($taskID);
		$now     = helper::now();

		$task = $this->getById($taskID);
		
		$this->deleteComment($taskID,'T');
		return $this->dao->update(TABLE_TASK)
				->set('deleted')->eq(1)
				->set('updatetime')->eq(date('Y-m-d H:i:s'))
				->where('id')->eq((int)$taskID)->exec(); 

	    if (dao::isError())
	    {
	    	die(js::error(dao::getError()));
	    }
	}

	/**
	 * finish a task.
	 * 
	 * @param  int    $taskID 
	 * @access public
	 * @return void
	 */
	public function finish($taskID)
	{
		// $oldTask = $this->getById($taskID);
		$now     = helper::now();
	
		$this->dao->update(TABLE_TASK)
			->set('completetime')->eq($now)
			->where('id')->eq((int)$taskID)
			->exec();

		if (dao::isError())
	    {
	    	die(js::error(dao::getError()));
	    }
	}

	/**
	 * Judge an action is clickable or not.
	 * 
	 * @param  object    $task 
	 * @param  string    $action 
	 * @access public
	 * @return bool
	 */
	/*public static function isClickable($task, $action)
	{
		$action = strtolower($action);

		if($action == 'delete')    return (!$task->begintime or $task->begintime == '0000-00-00 00:00:00') or ($task->completetime and $task->completetime != '0000-00-00 00:00:00') ;
		if($action == 'finish')    return (!$task->assesstime and $task->assesstime == '0000-00-00 00:00:00') and (!$task->completetime or $task->completetime == '0000-00-00 00:00:00') ;
		
		return true;
	}*/

	/**
	 * Set the begin of the task
	 * 
	 * @param  int    $taskID 
	 * @access public
	 * @return void
	 */
	public function setBeginning($taskID)
	{
		// $oldTask = $this->getById($taskID);
		$now     = helper::now();
		
		$task = $this->getById($taskID);

		if(!$task->begintime or $task->begintime == '0000-00-00 00:00:00')                   
			$this->dao->update(TABLE_TASK)
				->set('begintime')->eq($now)
				->where('id')->eq((int)$taskID)
				->exec();

		if (dao::isError())
	    {
	    	die(js::error(dao::getError()));
	    }
	}

	/**
	 * Get task info by Id.
	 * 
	 * @param  int    $taskID 
	 * @param  bool   $setImgSize
	 * @access public
	 * @return object|bool
	 */
	public function getById($taskID, $setImgSize = false)
	{
		$task = $this->dao->select('*')
			->from(TABLE_TASK)
			->where('id')->eq((int)$taskID)
			->andWhere('deleted')->eq(0)
			->fetch();
		$task->members = explode("|", $task->acpID);
		if(!$task) return false;
		if($setImgSize) $task->desc = $this->loadModel('file')->setImgSize($task->desc);
		//foreach($task as $key => $value) if(strpos($key, 'Date') !== false and !(int)substr($value, 0, 4)) $task->$key = '';
		$task->files = $this->loadModel('file')->getByObject('task', $taskID);
		$task->submitfiles = $this->loadModel('file')->getByObject('submittask', $taskID);
		
		return $task;
	}

	/**
	 * Get task list.
	 * 
	 * @param  int|array|string    $taskIDList 
	 * @access public
	 * @return array
	 */
	public function getByList($taskIDList = 0)
	{
		return $this->dao->select('*')->from(TABLE_TASK)
			->where('deleted')->eq(0)
			->beginIF($taskIDList)->andWhere('id')->in($taskIDList)->fi()
			->fetchAll('id');
	}

	/**
	 * get the members of the team.
	 * 
	 * @access public
	 * @return void
	 */
	public function getTeamMembers($account = '')
	{
		if(!$account) $account = $this->app->user->account;
		$relations = $this->dao->select('*')
					->from(TABLE_RELATIONS)
					->where('tea_ID')->eq($account)
					->andwhere('deleted')->eq(0)
					->fetchAll();

		$teammembers = array();

		foreach ($relations as $relation) 
		{
		   $student = $this->dao->select('*')
					->from(TABLE_USER)
					->where('account')->eq($relation->stu_ID)
					->andWhere('deleted')->eq(0)
					->fetch();
			if($student)
			{
				$teammembers[] = $student;
			}
		}

		return $teammembers;
	}

	/**
	 * Batch process tasks.
	 * 
	 * @param  int    $tasks 
	 * @access private
	 * @return void
	 */
	public function processTasks($tasks)
	{
		foreach($tasks as $task)
		{
			$task = $this->processTask($task);
		}
		return $tasks;
	}

	/**
	 * Process a task, judge it's status.
	 * 
	 * @param  object    $task 
	 * @access private
	 * @return object
	 */
	public function processTask($task)
	{
		$today = helper::today();
	   
		/* Delayed or not?. */
		if($task->completetime == NULL or $task->completetime == '0000-00-00 00:00:00')
		{
			$task->is_completed = 'undone';
			if($task->deadline != '0000-00-00')
			{
				$delay = helper::diffDate($today, $task->deadline);
				if($delay > 0) 
				{
					$task->delay = $delay;   
				}         
			}
		}
		else
		{
			$task->is_completed = 'done';
		}

		if($task->assesstime == NULL or $task->assesstime == '0000-00-00 00:00:00')
		{
			$task->is_assessed = 'unassessed';
		}
		else
		{
			$task->is_assessed = 'assessed';
		}

		return $task;
	}

	/**
	 * Get tasks of a user.
	 * 
	 * @param  string $account 
	 * @param  string $type     the query type 
	 * @param  int    $limit   
	 * @param  object $pager   
	 * @access public
	 * @return array
	 */
	public function getTasks($viewtype = '', $account = 0, $pager = null, $orderBy="id_desc")
	{
		$cur_role = $this->session->userinfo->roleid;
		if ($cur_role == 'student') $field = 'acpID';
		else  $field = 'asgID';
		if (!$account)   $account = $this->session->user->account;
		if (!$viewtype)  $viewtype = 'all';

        if ($this->session->userinfo->roleid == 'admin')
        {
            $tasks = $this->dao->select('*')
		                ->from (TABLE_TASK)
		                ->where('ACL')->eq(3)
		                ->andWhere('deleted')->eq(0)
		                ->orderBy($orderBy)
		                ->page($pager)
		                ->fetchAll();
		                
		return $this->processTasks($tasks);
        }

		if ($cur_role != 'student' && $cur_role != 'teacher')
		{
			$tasks = $this->dao->select('t1.*')
					->from(TABLE_TASK)->alias(t1)
					->leftJoin(TABLE_USER)->alias(t2)
					->on('t1.asgID=t2.account')
					->where('t1.ACL')->eq(3)
					->andWhere('t2.college_id')->eq($this->session->userinfo->collegeid)
					->andwhere('t1.deleted')->eq(0)
					->orderBy($orderBy)
					->page($pager)
					->fetchAll();

			return $this->processTasks($tasks);
		}
		
		if ($viewtype == 'all')
		{
			$tasks = $this->dao->select('*')
						->from(TABLE_TASK)
						->where($field)->eq($account)
						->andwhere('deleted')->eq(0)
						->orderBy($orderBy)
						->page($pager)
						->fetchAll();
		}

		if ($viewtype == 'undone')
		{
			$tasks = $this->dao->select('*')
						->from(TABLE_TASK)
						->where($field)->eq($account)
						->andWhere('deleted')->eq(0)
						->andWhere('completetime')->eqnull()
						->orderBy($orderBy)
						->page($pager)
						->fetchAll();
		}

		if ($viewtype == 'done')
		{
			$tasks = $this->dao->select('*')
						->from(TABLE_TASK)
						->where($field)->eq($account)
						->andWhere('deleted')->eq(0)
						->andWhere('completetime')->neqnull()
						->orderBy($orderBy)
						->page($pager)
						->fetchAll();
		}

		if ($viewtype == 'unassessed')
		{
			$tasks = $this->dao->select('*')
						->from(TABLE_TASK)
						->where('asgID')->eq($account)
						->andWhere('deleted')->eq(0)
						->andWhere('assesstime')->eqnull()
						->orderBy($orderBy)
						->page($pager)
						->fetchAll();
		}

		if ($viewtype == 'assessed')
		{
			$tasks = $this->dao->select('*')
						->from(TABLE_TASK)
						->where('asgID')->eq($account)
						->andWhere('deleted')->eq(0)
						->andWhere('assesstime')->neqnull()
						->orderBy($orderBy)
						->page($pager)
						->fetchAll();
		}
		/*if ($field == 'acpID')
		{
			$tasks = $this->dao->select('*')
			->from(TABLE_TASK)
			->where($field)->like('%' . $account . '%')
			->andWhere('deleted')->eq(0)
			->orderBy($orderBy)
			->page($pager)
			->fetchAll();
		}
		else
		{
			$tasks = $this->dao->select('*')
			->from(TABLE_TASK)
			->where($field)->eq($account)
			->andWhere('deleted')->eq(0)
			->orderBy($orderBy)
			->page($pager)
			->fetchAll();
		}*/
		
		//$this->loadModel('common')->saveQueryCondition($this->dao->get(), 'task');

		return $this->processTasks($tasks);

		//$tasks = $this->getOrderedObject($tasks ,$orderBy);//sort

		/*if($viewtype == 'all') return $tasks;

		$usertasks = array();

		if($viewtype == 'undone' or $viewtype == 'done')
		{
			foreach ($tasks as $task) 
			{
			   if($task->is_completed == $viewtype)
				{
					$usertasks[] = $task;
				}
			}
		}
		else
		{
			foreach ($tasks as $task) 
			{
			   if($task->is_assessed == $viewtype)
				{
					$usertasks[] = $task;
				}
			}
		}

		if($usertasks) return $usertasks;
		return array();*/
	}

	 /**
	 * set the list of a user's task.
	 * 
	 * @param  string $account 
	 * @access public
	 * @return array
	 */
	public function setTaskList($account = 0)
	{
		if(!$account)   $account = $this->app->user->account;

	   $usergroups = $this->dao->select('*')
						->from(TABLE_USERGROUP)
						->fetchAll();

		foreach ($usergroups as $usergroup) 
		{
			if($usergroup->account == $account)
			{
				$cur_userpriv = $usergroup->group;
			} 
		}

		if($cur_userpriv == 'student')
		{
			$taskList = array('all', 'undone', 'done');
		}
		elseif($cur_userpriv == 'teacher')
		{
			$taskList = array('all', 'undone', 'done', 'unassessed', 'assessed');
		}
        else
        {
        	$taskList = array('all');
        }
		return $taskList;
	}

	/**
	 * save a comment.
	 * 
	 * @param  int      $ID 
	 * @access public
	 * @return void
	 */
	public function saveComment($object, $ID, $type)
	{
		/*insert a comment*/
		$now  = helper::now();

		$comment = new stdclass();
		$comment->content = $object->comment;
		$comment->pid     = $ID;
		$comment->com_ID  = $this->app->user->account;
		$comment->create_time = $now;
		$comment->type = $type;

		if($comment->content)
			$this->dao->insert(TABLE_COMMENT)->data($comment)
				->autoCheck()
				->exec();

		if (dao::isError())
	    {
	    	die(js::error(dao::getError()));
	    }
	}

	/**
	 * delete a comment.
	 * 
	 * @param  int    $taskID 
	 * @access public
	 * @return void
	 */
	public function deleteComment($ID, $type)
	{
		$this->dao->update(TABLE_COMMENT)
				->set('deleted')->eq(1)
				->where('pid')->eq($ID)
				->andWhere('type')->eq($type)
				->exec();   

		if (dao::isError())
	    {
	    	die(js::error(dao::getError()));
	    } 
	}

	/**
	 * get the comments of a $type(task，question，conclusion).
	 * 
	 * @param  int      $ID 
	 * @access public
	 * @return void
	 */
	public function getComments($objecttype, $ID)
	{
		$type = $this->lang->commentList[$objecttype];
		$comments = $this->dao->select('*')->from(TABLE_COMMENT)
						->where('pid')->eq($ID)
						->andWhere('type')->eq($type)
						->andWhere('deleted')->eq(0)
						->fetchAll();

		$userpairs = $this->loadModel('user')->getPairs('noletter');
		
		foreach ($comments as $comment) 
		{
			$comment->realname = $userpairs[$comment->com_ID];
		}

		if($comments) return $comments;

		return array();
	}

	/**
	 * make a comment.
	 * 
	 * @param  int      $ID 
	 * @access public
	 * @return void
	 */
	public function makeComment($ID, $type)
	{
		$object = fixer::input('post')
			->get();

		$this->saveComment($object, $ID, $type);
	}

	public function saveRead($task)
	{
		$data = new stdclass();
		$cur_account = $this->session->user->account;
		if (($cur_account == $task->acpID) && ($task->readtime == null))
		{
			$data->readtime = date('Y-m-d H:i:s');
		}
		$data->readtimes = $task->readtimes + 1;
		$this->dao->update(TABLE_TASK)->data($data)
			->where('id')->eq($task->id)
			->exec();

		if (dao::isError())
	    {
	    	die(js::error(dao::getError()));
	    }
	}

	public function editsubmit($taskID)
	{
		$task = fixer::input('post')
			->add('submittime', date('Y-m-d H:i:s'))
			->remove('labels,files')
			->get();
		$this->dao->update(TABLE_TASK)
			->data($task)
			->where('id')->eq($taskID)
			->exec();

		/*set the upload file*/
		if(!dao::isError())
		{
			$this->loadModel('file')->saveUpload('submittask', $taskID);
		}
		else
		{
			die(js::error(dao::getError()));
		}
	}

	public function getOtherTask($account, $orderBy = '', $pager = null, $field = '')
	{
		$cur_account = $this->session->user->account;
		$cur_role = $this->session->userinfo->roleid;
        if (!$orderBy) $orderBy = 'id_desc';
        if (!$field) $field = 'acpID';

        if ($cur_role == 'admin')
        {  
            return $this->dao->select('*')
			            ->from(TABLE_TASK)
			            ->where('ACL')->eq(3)
			            ->andWhere('deleted')->eq(0)
			            ->andWhere($field)->eq($account)
			            ->orderBy($orderBy)
			            ->page($pager)
			            ->fetchAll();
        }
        
        if (($cur_role != 'student') && ($cur_role != 'teacher'))
        {   
        	return $this->dao->select('t1.*')
        	            ->from(TABLE_TASK)->alias(t1)
        	            ->leftJoin(TABLE_USER)->alias(t2)
        	            ->on('t1.'.$field.'=t2.account')
        	            ->where('t1.'.$field)->eq($account)
        	            ->andWhere('t1.ACL')->eq(3)
        	            ->andWhere('t2.college_id')->eq($this->session->userinfo->collegeid)
        	            ->andWhere('t1.deleted')->eq(0)
        	            ->orderBy($orderBy)
        	            ->page($pager)
        	            ->fetchAll();
        }

		if ($this->loadModel('project')->checkRelation($cur_account, $account))
		{  
			return $this->dao->select('*')
			            ->from(TABLE_TASK)
			            ->where('ACL')->in('2, 3')
			            ->andWhere('deleted')->eq(0)
			            ->andWhere($field)->eq($account)
			            ->orderBy($orderBy)
			            ->page($pager)
			            ->fetchAll();
		}
		else
		{   
			return $this->dao->select('*')
			            ->from(TABLE_TASK)
			            ->where('ACL')->eq(3)
			            ->andWhere('deleted')->eq(0)
			            ->andWhere($field)->eq($account)
			            ->orderBy($orderBy)
			            ->page($pager)
			            ->fetchAll();
		}
	}

	public function checkPriv($task, $method)
	{
		$cur_account = $this->session->user->account;

		if ($cur_account == $task->asgID)
		{
			if (($method == 'assess') || ($method == 'delete') || ($method == 'edit') || ($method == 'finish') || ($method == 'view'))
				return 1;
			else
				return 0;
		}

        if ($cur_account == $task->acpID)
        {
        	if (($method == 'submit') || ($method == 'editsubmit') || ($method == 'view'))
        		return 1;
        	else
        		return 0;
        } 

        if ($method == 'view')
        {
            $collegeid = $this->dao->select('college_id')->from(TABLE_USER)->where('account')->eq($task->asgID)->andWhere('deleted')->eq(0)->fetch()->college_id;
 
            if (($collegeid != $this->session->userinfo->collegeid) && ($this->session->userinfo->roleid != 'admin')) 
            	return 0;

        	if ($task->ACL == 3) return 1;

            if ($this->session->userinfo->roleid == 'manager') return 0;
            
        	if ($this->loadModel('project')->checkRelation($cur_account, $task->acpID))
        	{
        		if ($task->ACL == 1)
        			return 0;
        		else
        			return 1;
        	}
        	else
        	{
        		return 0;
        	}
        }
        else
        {
        	return 0;
        }
	}
}
